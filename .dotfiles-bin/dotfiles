#!/bin/sh

DOTFILES_DEST_PATH="${DOTFILES_DEST_PATH:-$HOME}"

DOTFILES_DIR="${DOTFILES_DIR:-.dotfiles}"
DOTFILES_PATH="${DOTFILES_PATH:-$DOTFILES_DEST_PATH/$DOTFILES_DIR}"

###############################################################################

MY_NAME="$0"

NEW_LINE='
'

###############################################################################

disable_colors() {
    NOCOLOR=""
    NORMAL=""
    STRONG=""
    BLACK=""
    RED=""
    GREEN=""
    BLUE=""
    BROWN=""
    PURPLE=""
    CYAN=""
    LIGHTGRAY=""
    DARKGRAY=""
    LIGHTRED=""
    LIGHTGREEN=""
    YELLOW=""
    LIGHTBLUE=""
    LIGHTPURPLE=""
    LIGHTCYAN=""
    WHITE=""
}

enable_colors() {
    NOCOLOR=`printf "\033[0m"`
    NORMAL=`printf "\033[1;0m"`
    STRONG=`printf "\033[1;1m"`
    BLACK=`printf "\033[0;30m"`
    RED=`printf "\033[0;31m"`
    GREEN=`printf "\033[0;32m"`
    BLUE=`printf "\033[0;34m"`
    BROWN=`printf "\033[0;33m"`
    PURPLE=`printf "\033[0;35m"`
    CYAN=`printf "\033[0;36m"`
    LIGHTGRAY=`printf "\033[0;37m"`
    DARKGRAY=`printf "\033[1;30m"`
    LIGHTRED=`printf "\033[1;31m"`
    LIGHTGREEN=`printf "\033[1;32m"`
    YELLOW=`printf "\033[1;33m"`
    LIGHTBLUE=`printf "\033[1;34m"`
    LIGHTPURPLE=`printf "\033[1;35m"`
    LIGHTCYAN=`printf "\033[1;36m"`
    WHITE=`printf "\033[1;37m"`
}

init_colors() {
    if [ -t 1 ]  && [ -t 2 ] ; then
        enable_colors
    else
        disable_colors
    fi
}

###############################################################################

die()
{
    echo "$MY_NAME:" "$@" > /dev/stderr
    exit 1
}

assert_output()
{
    local result1="$1"
    local result2=""
    shift

    result2="`"$@"`"

    if test x"$result1" != x"$result2" ; then
        die "assert_output: " "$@" "$NEW_LINE" \
            "expected  : " "$result1" "$NEW_LINE" \
            "calculated: " "$result2" "$NEW_LINE"
    fi
}

###############################################################################

relpath()
{
    # from: https://stackoverflow.com/questions/2564634/convert-absolute-path-into-relative-path-given-a-current-directory-using-bash

    # both $1 and $2 are absolute paths beginning with /
    # returns relative path to $2 ($target) from $1 ($source)
    local source="$1"
    local target="$2"

    local common_part="$source" # for now
    local result="" # for now

    while [ x"${target#$common_part}" = x"${target}" ] ; do
        # no match, means that candidate common part is not correct
        # go up one level (reduce common part)
        common_part="$(dirname "$common_part")"
        # and record that we went back, with correct / handling
        if [ -z "$result" ] ; then
            result=".."
        else
            result="../$result"
        fi
    done

    if [ x"$common_part" = x"/" ] ; then
        # special case for root (no common path)
        result="$result/"
    fi

    # since we now have identified the common part,
    # compute the non-common part
    local forward_part="${target#$common_part}"

    # and now stick all parts together
    if [ -n "$result" ] && [ -n "$forward_part" ] ; then
        result="$result$forward_part"
    elif [ -n "$forward_part" ] ; then
        # extra slash removal
        result="${forward_part#/}"
    fi

    echo "$result"
}

assert_output "../.."          relpath "/A/B/C" "/A"
assert_output ".."             relpath "/A/B/C" "/A/B"
assert_output ""               relpath "/A/B/C" "/A/B/C"
assert_output "D"              relpath "/A/B/C" "/A/B/C/D"
assert_output "D/E"            relpath "/A/B/C" "/A/B/C/D/E"
assert_output "../D"           relpath "/A/B/C" "/A/B/D"
assert_output "../D/E"         relpath "/A/B/C" "/A/B/D/E"
assert_output "../../D"        relpath "/A/B/C" "/A/D"
assert_output "../../D/E"      relpath "/A/B/C" "/A/D/E"
assert_output "../../../D/E/F" relpath "/A/B/C" "/D/E/F"

###############################################################################

get_status_color()
{
    local color=""
    case "$1" in
    INSTALLED) color="${GREEN}" ;;
    INSTALLED\(???\)) color="${YELLOW}" ;;
    MISSING) color="${PURPLE}" ;;
    CONFLICT) color="${RED}" ;;
    *) color="${YELLOW}" ;;
    esac

    printf "%s" "$color"
}

print_status_description()
{
    echo "$statuses_seen" | sort | uniq | \
    while IFS="$NEW_LINE" read -r status ; do

        if test -z "$status" ; then
            continue
        fi

        description=''
        long_description=''

        case "$status" in
        INSTALLED)
            description='symbolic link is installed at the destination directory'
        ;;
        INSTALLED\(???\))
            description="file is present at the destination directory"
            long_description='This probably means that the symbolic link is created at a directory level, not file level.
Please check and repair the configuration manually.'
        ;;
        MISSING)
            description="symbolic link is NOT installed at the destination directory"
        ;;
        CONFLICT)
            description="the destination file exists and is NOT a symbolic link to the source file"
        ;;
        *)
            description="unknown status; something went wrong"
            long_description='Please double check the configuration.'
        ;;
        esac

        status_color="`get_status_color "$status"`"

        printf "# %s%-15s%s - %s\n" \
            "$status_color" "$status" "${NOCOLOR}" \
            "$description"

        if test -n "$long_description" ; then
            echo "$long_description" | sed 's/^/# - /'
        fi

    done
}

###############################################################################

get_status()
{
    local filename=${1#./}

    local src_filename="$DOTFILES_PATH/$filename"
    local dest_filename="$DOTFILES_DEST_PATH/$filename"

    local real_path1=""
    local real_path2=""

    if test -h "$dest_filename" ; then
        real_path1="`readlink -f "$src_filename"`"
        real_path2="`readlink -f "$dest_filename"`"
        if test x"$real_path1" = x"$real_path2" ; then
            status="INSTALLED"
        else
            status="CONFLICT"
            status2="-> `readlink "$dest_filename"`"
        fi
    elif test -e "$dest_filename" ; then
        real_path1="`readlink -f "$src_filename"`"
        real_path2="`readlink -f "$dest_filename"`"
        if test x"$real_path1" = x"$real_path2" ; then
            status="INSTALLED(???)"
        else
            status="CONFLICT"
        fi
    elif ! test -e "$dest_filename" ; then
        status="MISSING"
    else
        status="???"
    fi
}

###############################################################################

# status and install commands share a lot of code, so these are implemented in single function
# installation is run, if DO_INSTALL is of non-zero lenght
status_and_install()
{
    (cd "$DOTFILES_PATH/" && find . -type f -not -path "./.git/*" -print) | \
    (
        any_files_processed=''

        statuses_seen=''

        IFS="$NEW_LINE"

        while read -r filename ; do
            filename=${filename#./}

            src_filename="$DOTFILES_PATH/$filename"
            dest_filename="$DOTFILES_DEST_PATH/$filename"

            if test -z "$filename" ; then
                continue
            fi

            if ! test -f "$src_filename" ; then
                # something wrong, just skipping
                continue
            fi

            status=""
            status2=""

            get_status "$filename"

            if test -z "$DO_INSTALL" ; then

                status_color="`get_status_color "$status"`"

                printf "%s%-15s%s %s %s\n" \
                    "$status_color" "$status" "${NOCOLOR}" \
                    "$filename" "$status2"

                statuses_seen="${statuses_seen}${NEW_LINE}$status"
                any_files_processed=y
            else
                if test x"$status" = x"MISSING" ; then
                    dest_dir="`dirname "$dest_filename"`"
                    mkdir -p "$dest_dir" || die "cannot create directory: $dest_dir"
                    link_path="`relpath "$dest_dir" "$src_filename"`"
                    ln -s "$link_path" "$dest_dir" || die "cannot create symbolic link \"$link_path\" at directory: $dest_dir"
                    printf "%s\n" "$filename"
                fi
            fi
        done

        if test -z "$DO_INSTALL" ; then
            if test -n "$any_files_processed" ; then
                echo "# Status description:"
                print_status_description "$statuses_seen"
            fi
        fi
    )
}

###############################################################################

cmd_status()
{
    DO_INSTALL=""
    status_and_install "$@"
}

cmd_install()
{
    DO_INSTALL="y"
    status_and_install "$@"
}

cmd_git()
{
    (cd "$DOTFILES_PATH/" && git "$@")
}

###############################################################################

init_colors

if ! test -d "$DOTFILES_PATH" ; then
    die "you don't have dotfiles installed at $DOTFILES_PATH"
fi

if test -n "$1" ; then
    cmd="$1"
    shift
    "cmd_$cmd" "$@"
else
    cmd_status
fi
